using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NetTypeReflector
{
    internal static partial class OutputHelper
    {
        private static string TypeToKeyword(Type t)
        {
            switch (t.Name)
            {
                case "Boolean":
                    return "bool";
                case "Byte":
                    return "byte";
                case "SByte":
                    return "sbyte";
                case "Char":
                    return "char";
                case "Decimal":
                    return "decimal";
                case "Double":
                    return "double";
                case "Single":
                    return "float";
                case "Int32":
                    return "int";
                case "UInt32":
                    return "uint";
                case "Int64":
                    return "long";
                case "UInt64":
                    return "ulong";
                case "Object":
                    return "object";
                case "Int16":
                    return "short";
                case "UInt16":
                    return "ushort";
                case "String":
                    return "string";
                case "Void":
                    return "void";
                //
                case "Boolean[]":
                    return "bool[]";
                case "Byte[]":
                    return "byte[]";
                case "SByte[]":
                    return "sbyte[]";
                case "Char[]":
                    return "char[]";
                case "Decimal[]":
                    return "decimal[]";
                case "Double[]":
                    return "double[]";
                case "Single[]":
                    return "float[]";
                case "Int32[]":
                    return "int[]";
                case "UInt32[]":
                    return "uint[]";
                case "Int64[]":
                    return "long[]";
                case "UInt64[]":
                    return "ulong[]";
                case "Object[]":
                    return "object[]";
                case "Int16[]":
                    return "short[]";
                case "UInt16[]":
                    return "ushort[]";
                case "String[]":
                    return "string[]";
                case "Void[]":
                    return "void[]";
                //
                case "Boolean*":
                    return "bool*";
                case "Byte*":
                    return "byte*";
                case "SByte*":
                    return "sbyte*";
                case "Char*":
                    return "char*";
                case "Decimal*":
                    return "decimal*";
                case "Double*":
                    return "double*";
                case "Single*":
                    return "float*";
                case "Int32*":
                    return "int*";
                case "UInt32*":
                    return "uint*";
                case "Int64*":
                    return "long*";
                case "UInt64*":
                    return "ulong*";
                case "Object*":
                    return "object*";
                case "Int16*":
                    return "short*";
                case "UInt16*":
                    return "ushort*";
                case "String*":
                    return "string*";
                case "Void*":
                    return "void*";
                //
                case "Boolean[]&":
                    return "bool[]&";
                case "Byte[]&":
                    return "byte[]&";
                case "SByte[]&":
                    return "sbyte[]&";
                case "Char[]&":
                    return "char[]&";
                case "Decimal[]&":
                    return "decimal[]&";
                case "Double[]&":
                    return "double[]&";
                case "Single[]&":
                    return "float[]&";
                case "Int32[]&":
                    return "int[]&";
                case "UInt32[]&":
                    return "uint[]&";
                case "Int64[]&":
                    return "long[]&";
                case "UInt64[]&":
                    return "ulong[]&";
                case "Object[]&":
                    return "object[]&";
                case "Int16[]&":
                    return "short[]&";
                case "UInt16[]&":
                    return "ushort[]&";
                case "String[]&":
                    return "string[]&";
                case "Void[]&":
                    return "void[]&";
                //
                case "Boolean&":
                    return "bool&";
                case "Byte&":
                    return "byte&";
                case "SByte&":
                    return "sbyte&";
                case "Char&":
                    return "char&";
                case "Decimal&":
                    return "decimal&";
                case "Double&":
                    return "double&";
                case "Single&":
                    return "float&";
                case "Int32&":
                    return "int&";
                case "UInt32&":
                    return "uint&";
                case "Int64&":
                    return "long&";
                case "UInt64&":
                    return "ulong&";
                case "Object&":
                    return "object&";
                case "Int16&":
                    return "short&";
                case "UInt16&":
                    return "ushort&";
                case "String&":
                    return "string&";
                case "Void&":
                    return "void&";
                //
                default:
                    return t.Name;
            }
        }
    }
}
